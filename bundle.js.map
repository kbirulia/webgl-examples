{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/markButtonAsActive.ts","webpack:///./src/utils/resizeCanvasToDisplaySize.ts","webpack:///./src/utils/colorConverters.ts","webpack:///./src/utils/createProgramFromScripts.ts","webpack:///./src/utils/getGLRenderingContext.ts","webpack:///./src/examples/gradientRectangles/shaderSource.ts","webpack:///./src/examples/gradientRectangles/index.ts","webpack:///./src/examples/rectangles/shaderSources.ts","webpack:///./src/utils/createShader.ts","webpack:///./src/utils/createProgram.ts","webpack:///./src/examples/rectangles/index.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","markButtonAsActive","target","parentElement","getElementsByClassName","classList","remove","add","resizeCanvasToDisplaySize","canvas","multiplier","width","clientWidth","height","clientHeight","convertHexToClColor","hex","opacity","replace","red","parseInt","substring","green","blue","convertRGBAToClColor","createProgram_1","createShader_1","createProgramFromScripts","gl","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","getGLRenderingContext","getContext","e","Error","gradientRectanglesShadersSource","fragment","vertex","getGLRenderingContext_1","createProgramFromScripts_1","shaderSource_1","resizeCanvasToDisplaySize_1","colorConverters_1","markButtonAsActive_1","gradientRectangles","document","getElementById","program","useProgram","positionALocation","getAttribLocation","colorALocation","resolutionULocation","getUniformLocation","enableVertexAttribArray","sizePosition","sizeColor","type","FLOAT","normalize","stride","offset","viewport","clearColor","clear","COLOR_BUFFER_BIT","uniform2f","vertexAttribPointer","amount","stepColor","positionBuffer","createBuffer","colorBuffer","color","initBuffers","drawArrays","TRIANGLES","num","bindBuffer","ARRAY_BUFFER","_a","canvasWidth","canvasHeight","x","y","getCoords","x1","x2","y1","y2","bufferData","Float32Array","STATIC_DRAW","setGeometry","setColors","RectanglesShadersSource","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","shaderSources_1","rectangles","colorULocation","size","initBuffer","glColor","uniform4f","rectangles_1","gradientRectangles_1","examples","Array","from","getElementsByTagName","forEach","button","addEventListener","id"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","export const markButtonAsActive = (target: HTMLButtonElement) => {\r\n    target.parentElement.getElementsByClassName('active')[0].classList.remove('active');\r\n    target.classList.add('active');\r\n};","export const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement, multiplier?: number) => {\r\n    multiplier = multiplier || 1;\r\n    const width  = canvas.clientWidth  * multiplier | 0;\r\n    const height = canvas.clientHeight * multiplier | 0;\r\n    if (canvas.width !== width ||  canvas.height !== height) {\r\n        canvas.width  = width;\r\n        canvas.height = height;\r\n        return true;\r\n    }\r\n    return false;\r\n}","import { GlColor } from '../model/color';\r\n\r\nexport const convertHexToClColor = (hex: string, opacity: number): GlColor => {\r\n    hex = hex.replace('#','');\r\n    const red = parseInt(hex.substring(0,2), 16);\r\n    const green = parseInt(hex.substring(2,4), 16);\r\n    const blue = parseInt(hex.substring(4,6), 16);\r\n\r\n    return convertRGBAToClColor(red, green, blue, opacity);\r\n};\r\n\r\nexport const convertRGBAToClColor = (red: number, green: number, blue: number, opacity: number): GlColor => {\r\n    return {\r\n        red: red / 255,\r\n        green: green / 255,\r\n        blue: blue / 255,\r\n        opacity\r\n    };\r\n};","import { createProgram } from './createProgram';\r\nimport { createShader } from './createShader';\r\n\r\nexport const createProgramFromScripts = (\r\n    gl: WebGLRenderingContext,\r\n    vertexShaderSource: string,\r\n    fragmentShaderSource: string\r\n): WebGLProgram => {\r\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    return createProgram(gl, vertexShader, fragmentShader);\r\n};","export const getGLRenderingContext = (canvas: HTMLCanvasElement): WebGLRenderingContext => {\r\n    try {\r\n        return canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n    }\r\n    catch(e) {\r\n        throw new Error(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n    }\r\n};","const fragment = `\r\n    precision mediump float;\r\n    varying vec4 v_color;\r\n    \r\n    void main() {\r\n        gl_FragColor = v_color;\r\n    }\r\n`;\r\n\r\nconst vertex = `\r\n    attribute vec2 a_position;\r\n    attribute vec4 a_color;\r\n    uniform vec2 u_resolution;\r\n    varying vec4 v_color;\r\n\r\n    void main() {\r\n        vec2 zeroToOne = a_position.xy / u_resolution;\r\n        vec2 zeroToTwo = zeroToOne * 2.0;\r\n        vec2 clipSpace = zeroToTwo - 1.0;\r\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n        v_color = a_color;\r\n    }\r\n`;\r\n\r\nexport const gradientRectanglesShadersSource = {fragment, vertex};","import { getGLRenderingContext } from '../../utils/getGLRenderingContext';\r\nimport { createProgramFromScripts } from '../../utils/createProgramFromScripts';\r\nimport { gradientRectanglesShadersSource } from './shaderSource';\r\nimport { resizeCanvasToDisplaySize } from '../../utils/resizeCanvasToDisplaySize';\r\nimport { convertRGBAToClColor } from '../../utils/colorConverters';\r\nimport { Coordinates2D } from '../../model/coordinates';\r\nimport { markButtonAsActive } from '../../utils/markButtonAsActive';\r\n\r\nexport const gradientRectangles = (e?: Event): void  => {\r\n    e && markButtonAsActive(e.target as HTMLButtonElement);\r\n\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n\r\n    const gl = getGLRenderingContext(canvas);\r\n\r\n    const program = createProgramFromScripts(gl, gradientRectanglesShadersSource.vertex, gradientRectanglesShadersSource.fragment);\r\n\r\n    gl.useProgram(program);\r\n\r\n    const positionALocation = gl.getAttribLocation(program, 'a_position');\r\n    const colorALocation = gl.getAttribLocation(program, 'a_color');\r\n    const resolutionULocation = gl.getUniformLocation(program, 'u_resolution');\r\n\r\n    gl.enableVertexAttribArray(positionALocation);\r\n    gl.enableVertexAttribArray(colorALocation);\r\n\r\n    const sizePosition = 2;\r\n    const sizeColor = 4;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n\r\n    createScene();\r\n\r\n    gl.vertexAttribPointer(positionALocation, sizePosition, type, normalize, stride, offset);\r\n\r\n    const amount = 15;\r\n    const width  =  200;\r\n    const height = 200;\r\n    const stepColor = 255 / (amount + 1);\r\n    const positionBuffer = gl.createBuffer();\r\n    const colorBuffer = gl.createBuffer();\r\n\r\n    for (let i = 0, color = 240; i < amount; ++i, color -= stepColor) {\r\n        initBuffers(i, color);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function initBuffers(num: number, color: number): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n        const {x, y} = getCoords(num);\r\n        setGeometry( x, y, width, height);\r\n        gl.vertexAttribPointer(positionALocation, sizePosition, type, normalize, stride, offset);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n        const glColor = convertRGBAToClColor(0, color, 0, 1);\r\n        setColors(glColor);\r\n        gl.vertexAttribPointer(colorALocation, sizeColor, type, normalize, stride, offset);\r\n\r\n    }\r\n\r\n\r\n    function createScene(): void {\r\n        resizeCanvasToDisplaySize(gl.canvas);\r\n\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        gl.uniform2f(resolutionULocation, gl.canvas.width, gl.canvas.height);\r\n    }\r\n\r\n    function getCoords(num: number): Coordinates2D {\r\n        const canvasWidth = gl.canvas.width;\r\n        const canvasHeight = gl.canvas.height;\r\n\r\n        const lastX = canvasWidth - width;\r\n        const lastY = canvasHeight - height;\r\n\r\n        return {\r\n            x: lastX / (amount - 1) * num,\r\n            y: lastY / (amount - 1) * num\r\n        }\r\n    }\r\n\r\n    function setGeometry(x: number, y: number, width: number, height: number): void {\r\n        const x1 = x;\r\n        const x2 = x + width;\r\n        const y1 = y;\r\n        const y2 = y + height;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            x1, y1,\r\n            x2, y1,\r\n            x1, y2,\r\n            x1, y2,\r\n            x2, y1,\r\n            x2, y2,]), gl.STATIC_DRAW);\r\n    }\r\n\r\n    function setColors({red, green, blue, opacity}): void {\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            red, green, blue, opacity,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            red, green, blue, opacity]), gl.STATIC_DRAW);\r\n    }\r\n};\r\n\r\n","const fragment = `\r\n    precision mediump float;\r\n\r\n    uniform vec4 u_color;\r\n    \r\n    void main() {\r\n       gl_FragColor = u_color;\r\n    }\r\n`;\r\n\r\nconst vertex = `\r\n    attribute vec2 a_position;    \r\n    uniform vec2 u_resolution;\r\n    \r\n    void main() {\r\n        vec2 zeroToOne = a_position.xy / u_resolution;\r\n        vec2 zeroToTwo = zeroToOne * 2.0;\r\n        vec2 clipSpace = zeroToTwo - 1.0;\r\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n    }\r\n`;\r\n\r\nexport const RectanglesShadersSource = {fragment, vertex};","/**\r\n *\r\n * @param {WebGLRenderingContext} gl - canvas with context webgl | experimental-webgl\r\n * @param {number} type\r\n * @param {string} source - program code\r\n * @returns {WebGLShader}\r\n */\r\nexport const createShader = (gl: WebGLRenderingContext, type: number, source: string): WebGLShader => {\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (success) {\r\n        return shader;\r\n    }\r\n\r\n    console.log(gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n};","/**\r\n *\r\n * @param {WebGLRenderingContext} gl\r\n * @param {WebGLShader} vertexShader\r\n * @param {WebGLShader} fragmentShader\r\n * @returns {WebGLProgram}\r\n */\r\nexport const createProgram = (gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram => {\r\n    const program = gl.createProgram();\r\n\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    const  success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (success) {\r\n        return program;\r\n    }\r\n\r\n    console.log(gl.getProgramInfoLog(program));\r\n    gl.deleteProgram(program);\r\n};","import { getGLRenderingContext } from '../../utils/getGLRenderingContext';\r\nimport { createProgramFromScripts } from '../../utils/createProgramFromScripts';\r\nimport { convertRGBAToClColor} from '../../utils/colorConverters';\r\nimport { Coordinates2D } from '../../model/coordinates';\r\nimport { resizeCanvasToDisplaySize } from '../../utils/resizeCanvasToDisplaySize';\r\nimport { RectanglesShadersSource } from './shaderSources';\r\nimport { markButtonAsActive } from '../../utils/markButtonAsActive';\r\n\r\nexport const rectangles = (e?: Event) => {\r\n    e && markButtonAsActive(e.target as HTMLButtonElement);\r\n\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n\r\n    const gl = getGLRenderingContext(canvas);\r\n\r\n    const program = createProgramFromScripts(gl, RectanglesShadersSource.vertex, RectanglesShadersSource.fragment);\r\n\r\n    gl.useProgram(program);\r\n\r\n    const positionALocation = gl.getAttribLocation(program, \"a_position\");\r\n    const resolutionULocation = gl.getUniformLocation(program, \"u_resolution\");\r\n\r\n    const colorULocation = gl.getUniformLocation(program, \"u_color\");\r\n\r\n    gl.useProgram(program);\r\n    gl.enableVertexAttribArray(positionALocation);\r\n\r\n    createScene();\r\n\r\n    const size = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n\r\n    const amount = 15;\r\n    const width  =  200;\r\n    const height = 200;\r\n    const stepColor = 255 / (amount + 1);\r\n    const positionBuffer = gl.createBuffer();\r\n\r\n    for (let i = 0, color = 240; i < amount; ++i, color -= stepColor) {\r\n        initBuffer(i, color);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function initBuffer(num: number, color: number): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        const {x, y} = getCoords(num);\r\n        setGeometry(x, y);\r\n\r\n        const glColor = convertRGBAToClColor(0, 0, color, 1);\r\n        gl.uniform4f(colorULocation, glColor.red, glColor.green, glColor.blue, glColor.opacity);\r\n\r\n        gl.vertexAttribPointer(positionALocation, size, type, normalize, stride, offset);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function createScene(): void {\r\n        resizeCanvasToDisplaySize(gl.canvas);\r\n\r\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n        gl.clearColor(0, 0, 0, 0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        gl.uniform2f(resolutionULocation, gl.canvas.width, gl.canvas.height);\r\n    }\r\n\r\n    function setGeometry(x: number, y: number): void {\r\n        const x1 = x;\r\n        const x2 = x + width;\r\n        const y1 = y;\r\n        const y2 = y + height;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            x1, y1,\r\n            x2, y1,\r\n            x1, y2,\r\n            x1, y2,\r\n            x2, y1,\r\n            x2, y2,]), gl.STATIC_DRAW);\r\n    }\r\n\r\n    function getCoords(num: number): Coordinates2D {\r\n        const canvasWidth = gl.canvas.width;\r\n        const canvasHeight = gl.canvas.height;\r\n\r\n        const lastX = canvasWidth - width;\r\n        const lastY = canvasHeight - height;\r\n\r\n        return {\r\n            x: lastX / (amount - 1) * num,\r\n            y: lastY / (amount - 1) * num\r\n        }\r\n    }\r\n};","import { rectangles } from './examples/rectangles';\r\nimport { gradientRectangles } from './examples/gradientRectangles';\r\n\r\nconst examples = {\r\n    rectangles,\r\n    gradientRectangles: gradientRectangles\r\n};\r\n\r\nArray.from(document.getElementsByTagName('button')).forEach(button => {\r\n    button.addEventListener('click', examples[button.id]);\r\n});\r\n\r\nrectangles();\r\n\r\n\r\n\r\n"],"sourceRoot":""}