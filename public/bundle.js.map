{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/createNewEmptyScene.ts","webpack:///./src/utils/markButtonAsActive.ts","webpack:///./src/utils/createProgramFromScripts.ts","webpack:///./src/utils/getGLRenderingContext.ts","webpack:///./src/utils/colorConverters.ts","webpack:///./src/textures/texture_1.jpg","webpack:///./src/examples/textured/shaderSources.ts","webpack:///./src/examples/textured/index.ts","webpack:///./src/examples/gradientRectangles/shaderSource.ts","webpack:///./src/examples/gradientRectangles/index.ts","webpack:///./src/utils/resizeCanvasToDisplaySize.ts","webpack:///./src/examples/rectangles/shaderSources.ts","webpack:///./src/utils/createShader.ts","webpack:///./src/utils/createProgram.ts","webpack:///./src/examples/rectangles/index.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","resizeCanvasToDisplaySize_1","createNewEmptyScene","gl","resolutionULocation","resizeCanvasToDisplaySize","canvas","viewport","width","height","clearColor","clear","COLOR_BUFFER_BIT","uniform2f","markButtonAsActive","target","parentElement","getElementsByClassName","classList","remove","add","createProgram_1","createShader_1","createProgramFromScripts","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","getGLRenderingContext","getContext","e","Error","convertHexToClColor","hex","opacity","replace","red","parseInt","substring","green","blue","convertRGBAToClColor","TexturedShaderSource","vertex","fragment","markButtonAsActive_1","getGLRenderingContext_1","createProgramFromScripts_1","shaderSources_1","createNewEmptyScene_1","imgUrl","textured","image","Image","src","onload","startWebGl","document","getElementById","program","useProgram","positionALocation","getAttribLocation","texcoordALocation","getUniformLocation","texResolutionULocation","enableVertexAttribArray","positionBuffer","createBuffer","texcoordBuffer","vertexCount","sideWidth","polygonCenter","x","y","prevXY","texCenter","prevTexXY","getVertexX","centerX","triangleNumber","Math","cos","PI","getVertexY","centerY","sin","setTexture","bufferData","ARRAY_BUFFER","Float32Array","STATIC_DRAW","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","polygonX","polygonY","bindBuffer","vertexAttribPointer","FLOAT","texX","texY","drawArrays","TRIANGLES","cratePolygon","gradientRectanglesShadersSource","shaderSource_1","colorConverters_1","gradientRectangles","colorALocation","sizePosition","sizeColor","type","normalize","stride","offset","amount","stepColor","colorBuffer","color","initBuffers","num","_a","canvasWidth","canvasHeight","getCoords","x1","x2","y1","y2","setGeometry","setColors","multiplier","clientWidth","clientHeight","RectanglesShadersSource","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","rectangles","colorULocation","size","initBuffer","glColor","uniform4f","rectangles_1","gradientRectangles_1","textured_1","examples","Array","from","getElementsByTagName","forEach","button","addEventListener","id"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import { resizeCanvasToDisplaySize } from './resizeCanvasToDisplaySize';\n\nexport const createNewEmptyScene = (gl: WebGLRenderingContext, resolutionULocation: WebGLUniformLocation) => {\n    resizeCanvasToDisplaySize(gl.canvas);\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n    gl.clearColor(0, 0, 0, 0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.uniform2f(resolutionULocation, gl.canvas.width, gl.canvas.height);\n};","export const markButtonAsActive = (target: HTMLButtonElement) => {\r\n    target.parentElement.getElementsByClassName('active')[0].classList.remove('active');\r\n    target.classList.add('active');\r\n};","import { createProgram } from './createProgram';\r\nimport { createShader } from './createShader';\r\n\r\nexport const createProgramFromScripts = (\r\n    gl: WebGLRenderingContext,\r\n    vertexShaderSource: string,\r\n    fragmentShaderSource: string\r\n): WebGLProgram => {\r\n    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n    return createProgram(gl, vertexShader, fragmentShader);\r\n};","export const getGLRenderingContext = (canvas: HTMLCanvasElement): WebGLRenderingContext => {\r\n    try {\r\n        return canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\r\n    }\r\n    catch(e) {\r\n        throw new Error(\"Unable to initialize WebGL. Your browser may not support it.\");\r\n    }\r\n};","import { GlColor } from '../model/color';\r\n\r\nexport const convertHexToClColor = (hex: string, opacity: number): GlColor => {\r\n    hex = hex.replace('#','');\r\n    const red = parseInt(hex.substring(0,2), 16);\r\n    const green = parseInt(hex.substring(2,4), 16);\r\n    const blue = parseInt(hex.substring(4,6), 16);\r\n\r\n    return convertRGBAToClColor(red, green, blue, opacity);\r\n};\r\n\r\nexport const convertRGBAToClColor = (red: number, green: number, blue: number, opacity: number): GlColor => {\r\n    return {\r\n        red: red / 255,\r\n        green: green / 255,\r\n        blue: blue / 255,\r\n        opacity\r\n    };\r\n};","module.exports = __webpack_public_path__ + \"src/textures/texture_1.jpg\";","const vertex = `\n    attribute vec2 a_position;\n    attribute vec2 a_texCoord;\n    \n    uniform vec2 u_resolution;\n    uniform vec2 u_texResolution;\n    \n    varying vec2 v_texCoord;\n\n    void main() {    \n        vec2 ratio = a_position / u_resolution * 2.0 - 1.0;\n        gl_Position = vec4(ratio * vec2(1, -1), 0, 1);\n        \n        v_texCoord = a_texCoord / u_texResolution;\n    }\n`;\n\nconst fragment = `\n    precision mediump float;\n    \n    uniform sampler2D u_image;\n    \n    varying vec2 v_texCoord;\n\n    void main() {\n       gl_FragColor = texture2D(u_image, v_texCoord);\n    }\n`;\n\nexport const TexturedShaderSource = {vertex, fragment};","import { markButtonAsActive } from '../../utils/markButtonAsActive';\r\nimport { getGLRenderingContext } from '../../utils/getGLRenderingContext';\r\nimport { createProgramFromScripts } from '../../utils/createProgramFromScripts';\r\nimport { TexturedShaderSource } from './shaderSources';\r\nimport { createNewEmptyScene } from '../../utils/createNewEmptyScene';\r\nimport { Coordinates2D } from '../../model/coordinates';\r\n//@ts-ignore\r\nimport * as imgUrl from '../../textures/texture_1.jpg';\r\n\r\nexport const textured = (e?: Event) => {\r\n    e && markButtonAsActive(e.target as HTMLButtonElement);\r\n\r\n    const image = new Image();\r\n    image.src = imgUrl;\r\n    image.onload = () => startWebGl(image);\r\n};\r\n\r\nexport const startWebGl = (image: HTMLImageElement): void => {\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n\r\n    const gl = getGLRenderingContext(canvas);\r\n\r\n    const program = createProgramFromScripts(gl, TexturedShaderSource.vertex, TexturedShaderSource.fragment);\r\n\r\n    gl.useProgram(program);\r\n\r\n    const positionALocation = gl.getAttribLocation(program, 'a_position');\r\n    const texcoordALocation = gl.getAttribLocation(program, \"a_texCoord\");\r\n\r\n    const resolutionULocation = gl.getUniformLocation(program, 'u_resolution');\r\n    const texResolutionULocation = gl.getUniformLocation(program, \"u_texResolution\");\r\n\r\n    gl.uniform2f(texResolutionULocation, image.width, image.height);\r\n\r\n    gl.enableVertexAttribArray(positionALocation);\r\n    gl.enableVertexAttribArray(texcoordALocation);\r\n\r\n    createNewEmptyScene(gl, resolutionULocation);\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n    const texcoordBuffer = gl.createBuffer();\r\n\r\n    const vertexCount = 12;\r\n    const sideWidth = 200;\r\n\r\n    const polygonCenter: Coordinates2D = {\r\n        x: gl.canvas.width / 2,\r\n        y: gl.canvas.height / 2,\r\n    };\r\n    let prevXY = {\r\n        x: polygonCenter.x + sideWidth,\r\n        y: polygonCenter.y\r\n    };\r\n    const texCenter: Coordinates2D = {\r\n        x: image.width / 2,\r\n        y: image.height / 2\r\n    };\r\n\r\n    let prevTexXY = {\r\n        x: texCenter.x + sideWidth,\r\n        y: texCenter.y\r\n    };\r\n\r\n    cratePolygon();\r\n\r\n    function cratePolygon() {\r\n        for (let triangleNumber = 1; triangleNumber <= vertexCount; triangleNumber++) {\r\n            const polygonX = getVertexX(polygonCenter.x, triangleNumber);\r\n            const polygonY = getVertexY(polygonCenter.y, triangleNumber);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n            setGeometry(polygonX, polygonY);\r\n            gl.vertexAttribPointer(positionALocation, 2, gl.FLOAT, false, 0,0);\r\n\r\n            const texX = getVertexX(texCenter.x, triangleNumber);\r\n            const texY = getVertexY(texCenter.y, triangleNumber);\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\r\n            setTexture(texX, texY);\r\n            gl.vertexAttribPointer(texcoordALocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n            gl.drawArrays(gl.TRIANGLES, 0, 3);\r\n\r\n            prevXY = {x: polygonX ,y: polygonY};\r\n            prevTexXY = {x: texX ,y: texY};\r\n        }\r\n    }\r\n\r\n    function getVertexX(centerX: number, triangleNumber: number): number {\r\n        return centerX + sideWidth * Math.cos(2 * Math.PI * triangleNumber / vertexCount);\r\n    }\r\n\r\n    function getVertexY(centerY: number, triangleNumber: number): number {\r\n        return centerY + sideWidth * Math.sin(2 * Math.PI * triangleNumber / vertexCount);\r\n    }\r\n\r\n    function setGeometry(x ,y): void {\r\n        // console.log(`CANVAS: (${polygonCenter.x},${polygonCenter.y}), (${x},${y}), (${prevXY.x},${prevXY.y})`);\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            polygonCenter.x, polygonCenter.y,\r\n            x,y,\r\n            prevXY.x, prevXY.y\r\n        ]), gl.STATIC_DRAW)\r\n    }\r\n\r\n    function setTexture(x: number, y: number) {\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            texCenter.x, texCenter.y,\r\n            x,  y,\r\n            prevTexXY.x,  prevTexXY.y,\r\n        ]), gl.STATIC_DRAW);\r\n\r\n        // Create a texture.\r\n        const texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n        // Set the parameters so we can render any size image.\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n        // Upload the image into the texture.\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n    }\r\n};","const fragment = `\r\n    precision mediump float;\r\n    varying vec4 v_color;\r\n    \r\n    void main() {\r\n        gl_FragColor = v_color;\r\n    }\r\n`;\r\n\r\nconst vertex = `\r\n    attribute vec2 a_position;\r\n    attribute vec4 a_color;\r\n    uniform vec2 u_resolution;\r\n    varying vec4 v_color;\r\n\r\n    void main() {\r\n        vec2 zeroToOne = a_position.xy / u_resolution;\r\n        vec2 zeroToTwo = zeroToOne * 2.0;\r\n        vec2 clipSpace = zeroToTwo - 1.0;\r\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n        v_color = a_color;\r\n    }\r\n`;\r\n\r\nexport const gradientRectanglesShadersSource = {fragment, vertex};","import { getGLRenderingContext } from '../../utils/getGLRenderingContext';\r\nimport { createProgramFromScripts } from '../../utils/createProgramFromScripts';\r\nimport { gradientRectanglesShadersSource } from './shaderSource';\r\nimport { resizeCanvasToDisplaySize } from '../../utils/resizeCanvasToDisplaySize';\r\nimport { convertRGBAToClColor } from '../../utils/colorConverters';\r\nimport { Coordinates2D } from '../../model/coordinates';\r\nimport { markButtonAsActive } from '../../utils/markButtonAsActive';\r\nimport { createNewEmptyScene } from '../../utils/createNewEmptyScene';\r\n\r\nexport const gradientRectangles = (e?: Event): void  => {\r\n    e && markButtonAsActive(e.target as HTMLButtonElement);\r\n\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n\r\n    const gl = getGLRenderingContext(canvas);\r\n\r\n    const program = createProgramFromScripts(gl, gradientRectanglesShadersSource.vertex, gradientRectanglesShadersSource.fragment);\r\n\r\n    gl.useProgram(program);\r\n\r\n    const positionALocation = gl.getAttribLocation(program, 'a_position');\r\n    const colorALocation = gl.getAttribLocation(program, 'a_color');\r\n    const resolutionULocation = gl.getUniformLocation(program, 'u_resolution');\r\n\r\n    gl.enableVertexAttribArray(positionALocation);\r\n    gl.enableVertexAttribArray(colorALocation);\r\n\r\n    const sizePosition = 2;\r\n    const sizeColor = 4;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n\r\n    createNewEmptyScene(gl, resolutionULocation);\r\n\r\n    gl.vertexAttribPointer(positionALocation, sizePosition, type, normalize, stride, offset);\r\n\r\n    const amount = 15;\r\n    const width  =  200;\r\n    const height = 200;\r\n    const stepColor = 255 / (amount + 1);\r\n    const positionBuffer = gl.createBuffer();\r\n    const colorBuffer = gl.createBuffer();\r\n\r\n    for (let i = 0, color = 240; i < amount; ++i, color -= stepColor) {\r\n        initBuffers(i, color);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function initBuffers(num: number, color: number): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n        const {x, y} = getCoords(num);\r\n        setGeometry( x, y, width, height);\r\n        gl.vertexAttribPointer(positionALocation, sizePosition, type, normalize, stride, offset);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n        const glColor = convertRGBAToClColor(0, color, 0, 1);\r\n        setColors(glColor);\r\n        gl.vertexAttribPointer(colorALocation, sizeColor, type, normalize, stride, offset);\r\n\r\n    }\r\n\r\n    function getCoords(num: number): Coordinates2D {\r\n        const canvasWidth = gl.canvas.width;\r\n        const canvasHeight = gl.canvas.height;\r\n\r\n        const lastX = canvasWidth - width;\r\n        const lastY = canvasHeight - height;\r\n\r\n        return {\r\n            x: lastX / (amount - 1) * num,\r\n            y: lastY / (amount - 1) * num\r\n        }\r\n    }\r\n\r\n    function setGeometry(x: number, y: number, width: number, height: number): void {\r\n        const x1 = x;\r\n        const x2 = x + width;\r\n        const y1 = y;\r\n        const y2 = y + height;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            x1, y1,\r\n            x2, y1,\r\n            x1, y2,\r\n            x1, y2,\r\n            x2, y1,\r\n            x2, y2,]), gl.STATIC_DRAW);\r\n    }\r\n\r\n    function setColors({red, green, blue, opacity}): void {\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            red, green, blue, opacity,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            1,1,1,1,\r\n            red, green, blue, opacity]), gl.STATIC_DRAW);\r\n    }\r\n};\r\n\r\n","export const resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement, multiplier?: number) => {\r\n    multiplier = multiplier || 1;\r\n    const width  = canvas.clientWidth  * multiplier | 0;\r\n    const height = canvas.clientHeight * multiplier | 0;\r\n    if (canvas.width !== width ||  canvas.height !== height) {\r\n        canvas.width  = width;\r\n        canvas.height = height;\r\n        return true;\r\n    }\r\n    return false;\r\n}","const fragment = `\r\n    precision mediump float;\r\n\r\n    uniform vec4 u_color;\r\n    \r\n    void main() {\r\n       gl_FragColor = u_color;\r\n    }\r\n`;\r\n\r\nconst vertex = `\r\n    attribute vec2 a_position;    \r\n    uniform vec2 u_resolution;\r\n    \r\n    void main() {\r\n        vec2 zeroToOne = a_position.xy / u_resolution;\r\n        vec2 zeroToTwo = zeroToOne * 2.0;\r\n        vec2 clipSpace = zeroToTwo - 1.0;\r\n        gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n    }\r\n`;\r\n\r\nexport const RectanglesShadersSource = {fragment, vertex};","/**\r\n *\r\n * @param {WebGLRenderingContext} gl - canvas with context webgl | experimental-webgl\r\n * @param {number} type\r\n * @param {string} source - program code\r\n * @returns {WebGLShader}\r\n */\r\nexport const createShader = (gl: WebGLRenderingContext, type: number, source: string): WebGLShader => {\r\n    const shader = gl.createShader(type);\r\n\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n\r\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n    if (success) {\r\n        return shader;\r\n    }\r\n\r\n    console.log(gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n};","/**\r\n *\r\n * @param {WebGLRenderingContext} gl\r\n * @param {WebGLShader} vertexShader\r\n * @param {WebGLShader} fragmentShader\r\n * @returns {WebGLProgram}\r\n */\r\nexport const createProgram = (gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram => {\r\n    const program = gl.createProgram();\r\n\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    const  success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n    if (success) {\r\n        return program;\r\n    }\r\n\r\n    console.log(gl.getProgramInfoLog(program));\r\n    gl.deleteProgram(program);\r\n};","import { getGLRenderingContext } from '../../utils/getGLRenderingContext';\r\nimport { createProgramFromScripts } from '../../utils/createProgramFromScripts';\r\nimport { convertRGBAToClColor} from '../../utils/colorConverters';\r\nimport { Coordinates2D } from '../../model/coordinates';\r\nimport { resizeCanvasToDisplaySize } from '../../utils/resizeCanvasToDisplaySize';\r\nimport { RectanglesShadersSource } from './shaderSources';\r\nimport { markButtonAsActive } from '../../utils/markButtonAsActive';\r\nimport { createNewEmptyScene } from '../../utils/createNewEmptyScene';\r\n\r\nexport const rectangles = (e?: Event) => {\r\n    e && markButtonAsActive(e.target as HTMLButtonElement);\r\n\r\n    const canvas = <HTMLCanvasElement>document.getElementById('canvas');\r\n\r\n    const gl = getGLRenderingContext(canvas);\r\n\r\n    const program = createProgramFromScripts(gl, RectanglesShadersSource.vertex, RectanglesShadersSource.fragment);\r\n\r\n    gl.useProgram(program);\r\n\r\n    const positionALocation = gl.getAttribLocation(program, \"a_position\");\r\n    const resolutionULocation = gl.getUniformLocation(program, \"u_resolution\");\r\n\r\n    const colorULocation = gl.getUniformLocation(program, \"u_color\");\r\n\r\n    gl.useProgram(program);\r\n    gl.enableVertexAttribArray(positionALocation);\r\n\r\n    createNewEmptyScene(gl, resolutionULocation);\r\n\r\n    const size = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n\r\n    const amount = 15;\r\n    const width  =  200;\r\n    const height = 200;\r\n    const stepColor = 255 / (amount + 1);\r\n    const positionBuffer = gl.createBuffer();\r\n\r\n    for (let i = 0, color = 240; i < amount; ++i, color -= stepColor) {\r\n        initBuffer(i, color);\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function initBuffer(num: number, color: number): void {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        const {x, y} = getCoords(num);\r\n        setGeometry(x, y);\r\n\r\n        const glColor = convertRGBAToClColor(0, 0, color, 1);\r\n        gl.uniform4f(colorULocation, glColor.red, glColor.green, glColor.blue, glColor.opacity);\r\n\r\n        gl.vertexAttribPointer(positionALocation, size, type, normalize, stride, offset);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    }\r\n\r\n    function setGeometry(x: number, y: number): void {\r\n        const x1 = x;\r\n        const x2 = x + width;\r\n        const y1 = y;\r\n        const y2 = y + height;\r\n\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            x1, y1,\r\n            x2, y1,\r\n            x1, y2,\r\n            x1, y2,\r\n            x2, y1,\r\n            x2, y2,]), gl.STATIC_DRAW);\r\n    }\r\n\r\n    function getCoords(num: number): Coordinates2D {\r\n        const canvasWidth = gl.canvas.width;\r\n        const canvasHeight = gl.canvas.height;\r\n\r\n        const lastX = canvasWidth - width;\r\n        const lastY = canvasHeight - height;\r\n\r\n        return {\r\n            x: lastX / (amount - 1) * num,\r\n            y: lastY / (amount - 1) * num\r\n        }\r\n    }\r\n};","import { rectangles } from './examples/rectangles';\r\nimport { gradientRectangles } from './examples/gradientRectangles';\r\nimport { textured } from './examples/textured';\r\n\r\nconst examples = {\r\n    rectangles,\r\n    gradientRectangles,\r\n    textured\r\n};\r\n\r\nArray.from(document.getElementsByTagName('button')).forEach(button => {\r\n    button.addEventListener('click', examples[button.id]);\r\n});\r\n\r\ntextured();\r\n\r\n\r\n\r\n"],"sourceRoot":""}